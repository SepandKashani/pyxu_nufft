doc/
    Add example tutorial notebook.

pyxu.math.cluster
    fuse_cluster() takes exceeding amount of time if the number of clusters is large.
        scratch/test_cluster.py shows this, even if M is tiny.
            solution: replace inner loop with partial-numba code (since dict[int,set] not accepted)

            while ...
                if fuseable_candidates(clusters, cl_LL, cl_UR):
                    <do i,j merge in Python to circumvent dict[int,set] issue>

                def fuseable_candidate(...) -> bool, (i,j)
                    equivalent of itertools.combinations() loop

pyxu.operator.UniformSpread
    Add DASK support

pyxu.operator.linop.fft.nufft
    Add DASK support
    Move to backward-KB kernel (or poly approximation)
    Hide NumbaExperimentalWarning
    NUFFT3
        _init_ops() creates uniformspread instances, which themselves re-cluster inputs.
        A large part of _build_cl_info() can be skipped in practice.

        spread/interp, if can be done in a single thread, preferable

Known Issues: Cause Known (& Fixable?)
    [OK] TestUniformSpread::test_valueND_adjoint
        Due to a (2,1,3,*codim_shape) broadcasted-view passed in as `arr`, hence `v` is read-only and fails Numba signature test.
        Does not happen in `test_valueND_apply` because `arr` is indexed with `x_idx` beforehand.
    [OK] DASK-case: Fixture[_op_asarray, width=DOUBLE] does not denote the true ground-truth due to DASK-based FFT()
         error accumulation.  Not really a problem because errors are in 1e-7 range, but did not look into how to fix
         them yet.
        TestFFS::test_value_asarray
    [OK] DASK-case: fails because generated test data does not match chunking structure of (`op._x`, `op._v`).
         These tests were not designed with chunk-size restrictions in mind. Can probably make then chunk-aware,
         but not a priority at the moment.
         We note that these tests work on NUMPY inputs, so the operators are correct.
        TestNUFFT3::test_math_adjoint
        TestNUFFT3::test_math_gram
        TestNUFFT3::test_math_lipschitz
        TestNUFFT3::test_math2_lipschitz
        TestNUFFT3::test_math3_lipschitz
        TestNUFFT3::test_value1D_svdvals
